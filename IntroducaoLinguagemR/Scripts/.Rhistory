setwd("C:\Users\Thiago\Desktop\PÓS-GRADUAÇÃO PUC MINAS\Introdução a linguagem R\scripts")
setwd("C:\Users\Thiago\Desktop\POSGRADUACAOOPUCMINAS\IntroducaoLinguagemR\Scripts")
setwd("C:\Users\Thiago\Desktop\POSGRADUACAOOPUCMINAS\IntroducaoLinguagemR\Scripts")
getwd()
setwd("C:\Desktop\POSGRADUACAOOPUCMINAS\IntroducaoLinguagemR\Scripts")
setwd("C:\Users\Thiago\Documents\POSGRADUACAOOPUCMINAS\IntroducaoLinguagemR\Scripts")
getwd()
getwd()
getwd("Documents")
setwd(("C:\Users\Thiago\Desktop\PosGraduacaoPUC\IntroducaoLinguagemR\Scripts"))
setwd("C:\Users\Thiago\Desktop\PosGraduacaoPUC\IntroducaoLinguagemR\Scripts")
getwd()
getwd()
setwd('C:/Users/Thiago/Desktop/PosGraduacaoPUC/IntroducaoLinguagemR/Scripts')
getwd()
View(cars)
attach(cars)
dados = cars$speed
hist(dados)
hist(dados, break = 10, main= 'Histograma do dataset cars')
hist(dados, breaks = 10, main= 'Histograma do dataset cars')
hist(dados, breaks = 8, main= 'Histograma do dataset cars')
hist(dados, breaks = 8, main= 'Histograma do dataset cars')
hist(dados, breaks = 2, main= 'Histograma do dataset cars')
hist(dados, breaks = 20, main= 'Histograma do dataset cars')
hist(dados, breaks = 10, main= 'Histograma do dataset cars')
hist(dados, breaks = c(0, 5, 10, 20, 30), main = 'Histograma', labels = TRUE)
hist(dados, breaks = 10, ylim = c(0,10), main = 'Histograma')
grafico = hist(dados, breaks = 10, ylim = c(0, 10), main = 'Histograma')
xaxis = seq(min(dados), max(dados), length = 10)
yaxis = dnorm(xaxis, mean=mean(dados), sd=sd(dados))
yaxis = yaxis*diff(grafico$mids)*length(dados)
lines(xaxis, yaxis, col = 'red')
grafico = hist(dados, breaks = 8, ylim = c(0, 10), main = 'Histograma')
lines(xaxis, yaxis, col = 'red')
grafico = hist(dados, breaks = 8, ylim = c(0, 10), main = 'Histograma')
grafico = hist(dados, breaks = 3, ylim = c(0, 10), main = 'Histograma')
grafico = hist(dados, breaks = 5, ylim = c(0, 10), main = 'Histograma')
grafico = hist(dados, breaks = 6, ylim = c(0, 10), main = 'Histograma')
grafico = hist(dados, breaks = 7, ylim = c(0, 10), main = 'Histograma')
grafico = hist(dados, breaks = 8, ylim = c(0, 10), main = 'Histograma')
grafico = hist(dados, breaks = 10, ylim = c(0, 10), main = 'Histograma')
grafico = hist(dados, breaks = 20, ylim = c(0, 10), main = 'Histograma')
grafico = hist(dados, breaks = 10, ylim = c(0, 10), main = 'Histograma')
grafico = hist(dados, breaks = 15, ylim = c(0, 10), main = 'Histograma')
grafico = hist(dados, breaks = 10, ylim = c(0, 10), main = 'Histograma')
getwd()
dados = matrix(c(652, 1537, 598, 242, 36, 46, 38, 21, 218, 327, 106, 67), nrow = 3, byrow = T)
dados
colnames(dados) = c('0', '1-150', '151-300', '>300')
rownames(dados) = c('Jovem', 'Adulto', 'Idoso')
barplot(dados, beside = T)
dados
# sem o beside
barplot(dados)
barplot(dados, col = c('red', 'blue', 'yellow'))
barplot(dados, col = c('red', 'blue', 'yellow'), beside = T)
legend('topright', pch = 1, col = c('red', 'blue', 'yellow'), legend = c('Jovem', 'Adulto', 'Idoso'))
legend('topright', pch = 5, col = c('red', 'blue', 'yellow'), legend = c('Jovem', 'Adulto', 'Idoso'))
colors()
# Conseguimos inverter as posições de faixa etária e faixa de quantidade
barplot(t(dados))
# Conseguimos inverter as posições de faixa etária e faixa de quantidade
barplot(t(dados), beside = T)
fatias = c(10, 30, 60)
labels_fatias = c('coelho', 'gato', 'cachorro')
dados = paste(fatias, labels_fatias)
dados = paste(fatias, '%', sep='')
dados = paste(dados, labels_fatias)
pie(fatias, labels = dados,
col = c('darksalmin', 'gainsboro', 'lemonchiffon4'),
main = 'Distribuição de pets')
pie(fatias, labels = dados,
col = c('darksalmon', 'gainsboro', 'lemonchiffon4'),
main = 'Distribuição de pets')
attach(iris)
values = table(Species)
values
labels = paste(names(values))
labels
pie(values, labels = labels, main = 'Distribuição de Espécies')
install.packages('plotrix')
library(plotrix)
pie3D(fatias, labels = dados, explode = 0.05, main = 'Distribuição de pets')
install.packages('ggplot2')
library(ggplot2)
# Carregando uma massa de dados built in
data(tips, package='reshape2)
# Criando um gráfico basico
qplot(total_bill, tip, data=tips, geom='points')
# Carregando uma massa de dados built in
data(tips, package='reshape2)
# Criando um gráfico basico
qplot(total_bill, tip, data=tips, geom='points')
library(ggplot2)
# Carregando uma massa de dados built in
data(tips, package='reshape2)
# Criando um gráfico basico
# Criando um gráfico basico
qplot(total_bill, tip, data=tips, geom='points')
data(tips, package='reshape2)
qplot(total_bill, tip, data=tips, geom='points')
# Carregando uma massa de dados built in
data(tips, package='reshape2)
View(tips)
# Criando um gráfico basico
# Criando um gráfico basico
qplot(total_bill, tip, data=tips, geom='points')
#install.packages('ggplot2')
library(ggplot2)
# Carregando uma massa de dados built in
data(tips, package = 'reshape2')
qplot(total_bill, tip, data=tips, geom = 'points')
qplot(total_bill, tip, data=tips)
qplot(total_bill, tip, data=tips, geom='points')
qplot(total_bill, tip, data=tips, geom_point())
='points
camada 1 = geom_point(
camada 1 = geom_point(
camada1 = geom_point(
mapping = aes(x = total_bill, y=tip, color=sex),
data = tips,
size = 3
)
qplot(total_bill, tip, data=tips, geom='points')
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
# Carregando uma massa de dados built in
data(tips, package = 'reshape2')
qplot(total_bill, tip, data=tips, geom='points')
camada1 = geom_point(
mapping = aes(x = total_bill, y=tip, color=sex),
data = tips,
size = 3
)
ggplot() + camada1
modelo_base = lm(tip~total_bill, data=tips)
modelo_fit = data.frame(
total_bill = tips$total_bill,
predict(modelo_base, interval = 'confidence')
)
head(modelo_fit)
camada = geom_line(
mapping = aes(x = total_bill, y = fit),
data = modelo_fit,
color = 'darkred'
)
ggplot() + camada1 + camada2
camada2 = geom_line(
mapping = aes(x = total_bill, y = fit),
data = modelo_fit,
color = 'darkred'
)
ggplot() + camada1 + camada2
# Camada 3
camada3 = geom_ribbon(
mapping = aes(x = total_bill, ymin=lwr, ymax=upr),
data = modelo_fit,
alpha = 0.3
)
ggplot() + camada1 + camada2 + camada3
# Essa parte é muito importante, não deixe de configurar
# Evite acentuação e espaços nos nomes das pastas
setwd('C:/Users/Thiago/Desktop/PosGraduacaoPUC/IntroducaoLinguagemR/Scripts')
# Essa parte é muito importante, não deixe de configurar
# Evite acentuação e espaços nos nomes das pastas
setwd('C:/Users/Thiago/Desktop/PosGraduacaoPUC/IntroducaoLinguagemR/Scripts')
getwd()
# Carregue o data frame births
library(Epi)
# Carregue o data frame births
attach(births)
# Carregue o data frame births
attach('births')
# Carregue o data frame births
View(births)
# Carregue o data frame births
View(Epi)
# Carregue o data frame births
View(Births)
data(births)
# Carregue o data frame births
data("iris")
library(iris)
library(Epi)
str("births")
# Carregue o data frame births
data("births")
# Carregue o data frame births
data("iris")
str("iris")
hist(dados)
# Construa um histograma para a variável bweigth
dados = iris$Sepal.Length
hist(dados)
# Construa o mesmo histograma acima, mude agora sua cor e o número de bins
hist(dados, breaks = 10, col = 'black')
# Construa o mesmo histograma acima, mude agora sua cor e o número de bins
hist(dados, breaks = 10, col = 'yellow')
getwd()
# Usando as funções do pacote base do R (utils)
search()
df1 = read.table('alunos.txt')
df1 = read.table('alunos.txt')
df1 = read.table('alunos.csv')
df1
dim(df1)
df1 = read.table('alunos.csv', header = TRUE, sep = ',')
df1
dim(df1)
df1 = read.table('alunos.csv', header = TRUE, sep = ',', col.names = c('nome', 'peso', 'altura'))
df1
df1 = read.table('alunos.csv', header = TRUE, sep = ',', col.names = c('Nome', 'Peso', 'Altura'))
df1
df1 = read.table('alunos.csv', header = TRUE, sep = ',', col.names = c('Nome', 'Peso', 'Altura'), na.strings = c('Aline', 'Marco'))
df1
str(df1)
df1 = read.table('alunos.csv', header = TRUE, sep = ',', col.names = c('Nome', 'Peso', 'Altura'), stringsAsFactors = FALSE)
df1
df2 = read.csv('alunos.csv')
df2
dim(df2)
df3 = read.csv2('alunos.csv')
df3
dim(df3)
df3 = read.csv2('alunos.csv', sep = ',')
df3
dim(df3)
df4 = read.delim('alunos.csv')
df4
df4 = read.delim('alunos.csv', sep = ',')
df4
write.table(mtcars, file = 'mtcars.txt')
dir()
df_mtcars = read.table('mtcars.txt')
df_mtcars
# Usando as funções do pacote base do R (utils)
search()
install.packages('readr')
library(readr)
arquivo = read.csv(file.choose())
arquivo
write_csv(iris, 'iris.csv')
dir()
install.packages('dplyr')
install.packages("dplyr")
install.packages('tidyr')
library(dplyr)
library(tidyr)
library(readr)
sono_df = read.csv('sono.csv')
View(sono_df)
head(sono_df)
class(sono_df)
str(sono_df)
gimpse(sono_df)
glimpse(sono_df)
glimpse(mutate(sono_df, peso_libras=sono_total/0.45359237))
count(sono_df, cidade)
hist(sono_df$sono_total)
hist(sono_df$cidade)
sono_total
hist(sono_df$sono_total)
sample_n(sono_df, size = 10)
sleepData = select(sono_df, nome, sono_total)
head(sleepData)
class(sleepData)
select(sono_df, nome)
select(sono_df, nome:pais)
filter(sono_df, sono_total >= 16)
filter(sono_df, sono_total >= 16, peso >= 80)
filter(sono_df, cidade %in% c('Recife', 'Curitiba'))
sono_df %>% filter(sono_total >= 16)
sono_df %>% arrange(cidade) %>% head
sono_df %>%
select(nome, cidade, sono_total) %>%
arrange(cidade, sono_total) %>%
head
sono_df %>%
select(nome, cidade, sono_total) %>%
arrange(cidade, sono_total) %>%
filter(sono_total) >= 16
sono_df %>%
select(nome, cidade, sono_total) %>%
arrange(cidade, desc(sono_total)) %>%
filter(sono_total >= 16)
sono_df %>%
mutate(novo_indice = sono_total/peso) %>%
head
head(sono_df)
sono_df %>%
mutate(novo_indice = sono_total/peso,
peso_libras = peso/0.45359237) %>%
head
sono_df %>%
summarise(media_sono = mean(sono_total))
sono_df %>%
summarise(media_sono = mean(sono_total),
min_sono = min(sono_total),
max_sono = max(sono_total),
total = n())
sono_df %>%
group_by(cidade) %>%
summarize(media_sono = mean(sono_total),
min_sono = min(sono_total),
max_sono = max(sono_total),
total = n())
# Lista de Exercícios - Unidade 4 - Manipulação de Dados em R
# Configurando o diretório de trabalho
# Essa parte é muito importante, não deixe de configurar
# Evite acentuação e espaços nos nomes das pastas
getwd()
# Carregue o arquivo input.csv em anexo e então responda às seguintes
input_df = read.csv('input.csv')
View(input_df)
#perguntas:
# Pergunta 1 - Quantas linhas e quantas colunas tem o objeto resultante em
# R?
dim(input_df)
# Pergunta 2 - Qual o maior salário?
maior_salario = max(input_df, salary)
# Pergunta 2 - Qual o maior salário?
maior_salario = max(input_df$salary)
maior_salario
# Pergunta 3 - Imprima no console o registro da pessoa com o maior
# salário.
filter(input_df, salary == maior_salario)
# Pergunta 4 - Imprima no console todas as pessoas que trabalham no
# departamento de IT.
filter(input_df, dept == 'IT')
# Pergunta 5 - Imprima no console as pessoas do departamento de IT com
#salário superior a 600.
input_df %>%
select(name, dept, salary) %>%
filter(dept == 'IT') %>%
filter(salary > 600)
getwd()
M = matrix(c(1:10), nrow = 5, ncol = 2, dimnames = list(c('a', 'b', 'c', 'd', 'e'), c('A', 'B')))
M['e', 'A']
mode(c('a', 'b', 'c'))
mode(3.32e16)
mode(1/3)
mode(sqrt(-2i))
M = matrix(c(1:9), 3, 3, byrow = T, dimnames = list(c('a','b','c'), c('d', 'e', 'f')))
rownames(M)
X = C(1,2,3,3,5,3,2,4,NA)
X = c(1,2,3,3,5,3,2,4,NA)
factor(X)
plot(x, y, col='blue', pch=4, main = 'Scatterplot', col.main='blue', cex.main=1.5,
xlab = 'Variável x', ylab = 'Variável y')
x = rnorm(10, 8, 10)
y = rpois(10, 10)
z = rnorm(10, 6, 7)
t = rpois(10, 5)
plot(x, y, col='blue', pch=4, main = 'Scatterplot', col.main='blue', cex.main=1.5,
xlab = 'Variável x', ylab = 'Variável y')
# Principais pacotes
# Utils - carregado com a base do R
?readr
